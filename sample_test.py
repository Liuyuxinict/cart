import torch
import math
import einops


result = 10+10+10+2+10+10+40+40
print(result)
input()
'''
test = torch.randn([2,3,48,48])
test1 = test.reshape([2,48,48,3])
test2 = test.permute(0,2,3,1)
print(test1 == test2)
input()
'''

ex1 = torch.tensor([[1,2],[3,4]])
ex2 = ex1.unsqueeze(dim=0).repeat_interleave(2,dim=1).repeat_interleave(2,dim=2)
print(ex1.shape)
print(ex2)
input()



i1 = torch.randn([3,3,8,49])
i2 = torch.randn([3,3,8,16])
print(torch.cat((i1,i2), dim=-1).shape)

torch.set_printoptions(profile="full")
offset = torch.tensor([[[[ 0.2514,  0.5742, -0.2766, -2.2006],
          [ 3.0125,  1.0356, -0.2187, -0.8402],
          [ 0.1692,  0.4157, -0.6324,  0.6841],
          [-0.0456, -1.9364, -0.1893, -0.9378],
          [-0.5199,  1.4319, -0.9341, -0.5941],
          [-2.4937,  0.3244, -1.7034, -1.0274],
          [-0.0648,  1.0967, -1.2014,  1.4170],
          [ 0.5567, -1.1953,  0.4413,  0.2590],
          [ 0.2847, -1.4142,  0.1990,  1.3293],
          [-1.9053,  0.2157,  0.9615, -0.1111],
          [-0.1782, -0.3337,  0.8371,  2.8507],
          [ 0.8815, -0.7115, -0.4405,  0.3775],
          [ 0.8492, -2.3340,  0.2642,  0.5972],
          [-0.5165,  0.5161, -0.1174,  0.6889],
          [ 0.9236, -0.4396,  1.1647, -0.2125],
          [ 0.9894, -0.0578,  1.2911,  1.3491]],

         [[-0.3515,  0.5920,  0.3934,  0.3942],
          [-0.3395,  0.7762,  0.0689,  0.8977],
          [-1.3239,  0.1940, -0.3377,  2.3328],
          [ 0.3555,  0.0987, -0.3490,  0.7907],
          [ 0.6518,  0.2924, -0.2832,  1.2309],
          [-1.4453,  1.4226, -0.2642,  0.6988],
          [ 1.1478,  0.5708, -1.7546,  0.9480],
          [ 0.2954, -0.7412,  0.5242, -0.4000],
          [ 1.7031,  1.2666,  0.8588,  1.7493],
          [-1.1142, -0.1689, -0.3241,  0.0474],
          [-1.2684, -0.8443, -0.2977,  0.7920],
          [-0.7422, -0.4176, -0.2366, -0.5642],
          [-0.6786,  0.8633,  1.1544,  2.1669],
          [ 0.9650, -0.4527,  0.6039, -0.6000],
          [-0.3481,  0.3843, -0.2832,  1.9612],
          [-1.0445,  0.3646,  0.2443,  0.8366]]],


        [[[ 0.2647, -1.0934, -0.2274, -0.1205],
          [-0.2339, -0.4993, -1.2152, -1.7876],
          [-0.2031,  0.5203,  1.4541,  0.0771],
          [-0.5277,  0.3641, -0.5839,  1.1838],
          [ 1.1399,  1.0111,  1.0219,  0.6659],
          [-0.1729, -0.4069,  0.3390,  1.0258],
          [ 1.2339, -0.0305, -1.4757,  1.9708],
          [-0.2246, -0.3918, -0.0843,  0.4569],
          [-1.2162, -1.5882,  0.7853, -0.7332],
          [ 2.0028,  0.8844,  2.0663,  0.2103],
          [ 0.5799, -0.6006,  0.3979, -0.1780],
          [ 0.2740, -2.3895, -0.4509, -0.7873],
          [-1.6022, -0.8558, -0.2597,  0.3295],
          [ 0.7733,  0.8530,  0.1414, -0.6190],
          [-1.4934, -1.1972, -1.0268, -0.6474],
          [-0.3988,  0.8887, -0.0844,  1.2262]],

         [[ 0.1355, -0.6516,  0.6871,  0.9876],
          [ 0.6886, -1.1871, -0.0926, -0.4387],
          [ 0.1600,  1.2482,  1.5138, -0.1256],
          [-1.6454,  1.7284, -0.1410,  1.3872],
          [ 0.3052, -1.4686, -0.0820,  0.0858],
          [ 0.4724, -1.8736,  1.1109, -0.5041],
          [ 1.3691, -0.6484, -1.5726,  1.7488],
          [ 0.4186, -0.2386, -0.9345,  0.4490],
          [ 1.1168,  0.7297,  0.5735, -0.8222],
          [-0.6111,  0.2425,  1.1796, -1.5847],
          [-0.2716, -0.2690, -2.3758, -0.2406],
          [-2.4233, -0.6627,  0.5671,  0.6995],
          [ 1.7310, -1.2394, -1.1915, -0.3557],
          [-0.8725,  2.3125,  0.0231,  0.3062],
          [-1.3729, -0.5078,  0.3882, -0.7578],
          [-1.2323, -1.0937, -0.8109, -1.5272]]]])



offset = offset.permute(2,3,0,1)
print(offset.shape)

offset1 = offset.reshape(2,8,4,4)
offset2 = einops.rearrange(offset,"(B C) m h w->B C m (h w)", B=2,C=8,h=2,w=2)
print(offset1 == offset2)
input()

offset = offset.permute(0, 2, 3, 1).reshape(32,2,2,2)
print(offset)
input()

input = torch.arange(7 * 7).view(1, 1, 7, 7).float()
print(input)

H = input.shape[-2]
W = input.shape[-1]
stride = 2
dtype = torch.float32
rH = math.ceil(H / 2) if stride == 2 else H
rW = math.ceil(W / 2) if stride == 2 else W


meshx = torch.arange(0, H, stride,dtype=dtype).view(-1,1).repeat(1, rW)
meshy = torch.arange(0, W, stride,dtype=dtype).view(1,-1).repeat(rH,1)
grid = torch.stack((meshx, meshy), 2).expand(1,rH,rW,2)
offset = torch.zeros([1,rH, rW, 2])
offset[:,1,2,0]=1
offset[:,1,2,1]=2

grid = grid + offset

grid[..., 0] = grid[..., 0].div(H-1).mul(2).sub(1)
print(grid[..., 0])
grid[..., 1] = grid[..., 1].div(W-1).mul(2).sub(1)
print(grid[..., 1])




output = torch.nn.functional.grid_sample(input, grid[...,(1, 0)], align_corners = True)
print(output)